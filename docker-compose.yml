version: '3.8'
services:
    fastapi:
        build: ./services/fastapi/
        container_name: gui_fastapi
        env_file:
            - ./services/fastapi/.env
        ports:
            - "${FASTAPI_PORT}:8001"
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - ${LOCAL_WORKDIR}:/app/working
        #command: ["python", "-m", "uvicorn", "api.api:app", "--host", "0.0.0.0", "--port", "8001"]
        #command: ["gunicorn", "api.api:app", "--workers", "4", "-k", "uvicorn.workers.UvicornWorker", "--bind", "0.0.0.0:8001"]
        networks:
            - network_intern
    db:
        image: postgres:${POSTGRES_VERSION}
        container_name: gui_db
        restart: always
        volumes:
            - ./data/postgres/:/var/lib/postgresql/data
        command: -p ${SQL_PORT}
        environment:
            POSTGRES_USER: ${SQL_USER}
            POSTGRES_PASSWORD: ${SQL_PASSWORD}
            POSTGRES_DB: ${SQL_DATABASE}
            POSTGRES_HOST: ${SQL_HOST}
        networks:
            - network_intern
    pgadmin:
        image: dpage/pgadmin4
        container_name: gui_pgadmin
        restart: always
        environment:
            PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
            PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
        depends_on:
            - db
        ports:
            - "${PGADMIN_PORT}:80"
        volumes:
            - pgadmin_volume:/var/lib/pgadmin
        networks:
            - network_intern
    app:
        build:
            context: ./services/gui/app
            dockerfile: ./dockerfile
        container_name: gui_app
        restart: always
        env_file:
            - ./.env
        volumes:
            - static_volume:/src/cdn_static_root
            - ${LOCAL_WORKDIR}:/src/dumps
        depends_on:
            - db
        command: ["python", "manage.py", "runserver", "0.0.0.0:8000"]
        #command: ["gunicorn", "epa.asgi:application", "-k", "uvicorn.workers.UvicornWorker", "--bind", "0.0.0.0:8000"]
        networks:
            - network_intern
    proxy:
        build: ./services/proxy
        container_name: gui_proxy
        restart: always
        ports:
            - ${PROXY_PORT}:80
        depends_on: 
            - app
        volumes:
            - static_volume:/static
            - ${LOCAL_WORKDIR}:/static/working
        networks:
            - network_intern
#    djangoq:
#        build:
#            context: ./gui/app
#            dockerfile: ./compose/production/app_postgres/dockerfile
#        container_name: gui_queue
#        restart: always
#        env_file:
#            - ./gui/.envs/epa.postgres
#        command: python manage.py qcluster
#        volumes:
#            - .:/code
#        expose:
#            - 8000
#        depends_on:
#            - db
#            - app
#        networks:
#            - network_intern

networks:
    network_intern:

volumes:
  static_volume:
  pgadmin_volume: